<article class="_2rhmJa">
 <p>xUnit表示一组单元测试框架集合，其基本思想起源于SUnit。SUnit由极限编程之父Kent Beck使用SmallTalk设计实现。随后，Kent Beck与Erich Gamma结对编程实现了JUnit，这是一个Java实现的移植版本。</p>
 <p>JUnit随着Java社区不断壮大，及其敏捷软件开发思潮的涌现，当前JUnit已经成为Java程序员最常使用的框架之一。当然，JUnit也在不断地演进，截止目前JUnit5已然面世，重焕青春。</p>
 <p>JUnit之后，可谓百家争鸣。各个语言社区都诞生了自家优秀的xUnit实现，包括基于JVM实现的各种高级编程语言。它们基本继承或发扬了xUnit基本架构与方法论，部分后起之秀在用户界面友好性方面取得极大的改进和提升。例如，我所偏爱的Spock, ScalaTest框架。</p>
 <p>在C/C++领域，xUnit框架也是百家争鸣，这里给大家介绍两款测试框架。</p>
 <h2>Google Test</h2>
 <p>Google Test使用C++语言实现，功能强大、系统稳定、移植性良好、支持自动发现，相对于C++社区其它xUnit实现，可谓技高一筹，在C++社区占据主导地位。</p>
 <div class="_2Uzcx_">
  <button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy">
    <svg viewbox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
     <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
    </svg></i></button>
  <pre class="line-numbers  language-cpp"><code class="cpp  language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;gtest/gtest.h&gt;</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>

<span class="token keyword">namespace</span> <span class="token punctuation">{</span>
  <span class="token keyword">struct</span> <span class="token class-name">StackSpec</span> <span class="token operator">:</span> testing<span class="token operator">::</span>Test <span class="token punctuation">{</span>
  <span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">SetUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> override <span class="token punctuation">{</span>
      s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token keyword">protected</span><span class="token operator">:</span>
    std<span class="token operator">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">TEST_F</span><span class="token punctuation">(</span>StackSpec<span class="token punctuation">,</span> apply_pop_0_time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">TEST_F</span><span class="token punctuation">(</span>StackSpec<span class="token punctuation">,</span> apply_pop_1_time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">TEST_F</span><span class="token punctuation">(</span>StackSpec<span class="token punctuation">,</span> apply_pop_2_time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT_TRUE</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 </div>
 <p>但是，Google Test 也存在一些不尽人意的细节之处。</p>
 <h3>命名</h3>
 <p>用例名字必须遵循标识符的严格命名格则，否则编译不能通过。一方面，新增或修改用例时，输入长串下划线极度枯燥乏味；另一方面，极大地降低了用例的可读性。</p>
 <p>当用例命名成为程序员的一种负担，其质量将大大折扣。但是，测试用例是系统行为描述最重要的“活文档”，它与被测系统的代码一并入库，并保持同步。如果，测试用例命名质量不高，"Test as Document"的愿景只能沦为痴人说梦了。</p>
 <div class="_2Uzcx_">
  <button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy">
    <svg viewbox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
     <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
    </svg></i></button>
  <pre class="line-numbers  language-cpp"><code class="cpp  language-cpp"><span class="token comment">// Bad Smell: test cases must be named using c++ identifier.</span>
<span class="token function">TEST_F</span><span class="token punctuation">(</span>RobotCleanerTest<span class="token punctuation">,</span> at_beginning_the_robot_should_be_in_at_the_initial_position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token function">Position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NORTH<span class="token punctuation">)</span><span class="token punctuation">,</span> robot<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
 </div>
 <h3>重复</h3>
 <p>RobotCleanerTest扮演测试装置，但与每个测试用例(TEST_F)分离实现，每个用例不得不一次次地重复RobotCleanerTest。</p>
 <p>测试装置与测试用例相分离，破坏了它们之间的内聚性。当然，C++程序员忍受类与成员函数分离定义而引入的重复设计，早已司空见惯矣。一般地，在C++编译模型中，在头文件中定义类，实现文件中定义成员函数。但是，此处测试装置与测试用例往往都在同一个实现文件内，分离定义引入重复设计，无畏地给用户增加了不必要的负担。</p>
 <div class="_2Uzcx_">
  <button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy">
    <svg viewbox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
     <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
    </svg></i></button>
  <pre class="line-numbers  language-cpp"><code class="  language-cpp"><span class="token comment">// Bad Smell: you must duplicate fixture name for each test case.</span>
<span class="token keyword">struct</span> <span class="token class-name">RobotCleanerTest</span> <span class="token operator">:</span> testing<span class="token operator">::</span>Test <span class="token punctuation">{</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
  RobotCleaner robot<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">TEST_F</span><span class="token punctuation">(</span>RobotCleanerTest<span class="token punctuation">,</span> at_beginning_the_robot_should_be_in_at_the_initial_position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token function">Position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NORTH<span class="token punctuation">)</span><span class="token punctuation">,</span> robot<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">TEST_F</span><span class="token punctuation">(</span>RobotCleanerTest<span class="token punctuation">,</span> robot_should_be_face_west_after_turn_left<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  robot<span class="token punctuation">.</span><span class="token function">turnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token function">Position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> WEST<span class="token punctuation">)</span><span class="token punctuation">,</span> robot<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 </div>
 <h3>隐晦</h3>
 <p>测试装置与测试用例相分离，本应该被直观地理解为类与成员函数之间的关系。理论上，测试用例<code>TEST_F</code>与测试装置应该在同一个类域之中，<code>TEST_F</code>能够直接获取到测试装置的私有成员。例如，RobotCleanerTest::robot。</p>
 <p>不幸的是，RobotCleanerTest与TEST_F存在隐晦的继承关系。如果用户不了解Google Test的实现机制，就根本无法理解成员变量RobotCleanerTest::robot为什么被声明为protected，而不是private。</p>
 <div class="_2Uzcx_">
  <button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy">
    <svg viewbox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
     <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
    </svg></i></button>
  <pre class="line-numbers  language-cpp"><code class="cpp  language-cpp"><span class="token keyword">struct</span> <span class="token class-name">RobotCleanerTest</span> <span class="token operator">:</span> testing<span class="token operator">::</span>Test <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span> <span class="token comment">// should be protected</span>
  RobotCleaner robot<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">TEST_F</span><span class="token punctuation">(</span>RobotCleanerTest<span class="token punctuation">,</span> at_beginning_the_robot_should_be_in_at_the_initial_position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Error: 'RobotCleaner RobotCleanerTest::robot' is private within this context.</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token function">Position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NORTH<span class="token punctuation">)</span><span class="token punctuation">,</span> robot<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 </div>
 <h3>误用</h3>
 <p>用户也需要关注<code>TEST</code>， <code>TEST_F</code>之间微妙的差异，并区分两者之间的使用场景，无疑增加了用户的心智包袱。例如，用户在此处本应使用<code>TEST_F</code>，而误用为<code>TEST</code>。这个例子较为幸运，编译器提示<code>robot</code>变量未定义，编译是失败的。但是，在特殊场景可能会逃出编译时检查，导致运行时用例失败。</p>
 <div class="_2Uzcx_">
  <button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy">
    <svg viewbox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
     <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
    </svg></i></button>
  <pre class="line-numbers  language-cpp"><code class="cpp  language-cpp"><span class="token keyword">struct</span> <span class="token class-name">RobotCleanerTest</span> <span class="token operator">:</span> testing<span class="token operator">::</span>Test <span class="token punctuation">{</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
  RobotCleaner robot<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// should be TEST_F</span>
<span class="token function">TEST</span><span class="token punctuation">(</span>RobotCleanerTest<span class="token punctuation">,</span> at_beginning_the_robot_should_be_in_at_the_initial_position<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Error: 'robot' was not declared in this scope.</span>
  <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token function">Position</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NORTH<span class="token punctuation">)</span><span class="token punctuation">,</span> @robot@<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 </div>
 <h3>大小写</h3>
 <p>覆写<code>Test::SetUp</code>时，经常将其错误地写为<code>setup, setUp, Setup</code>，不经意地大小写错误可能导致运行时测试用例执行失败。当然，如果坚持使用<code>override</code>关键字，可以提高编译时安全性，将错误拦截至编译期。</p>
 <div class="_2Uzcx_">
  <button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy">
    <svg viewbox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
     <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
    </svg></i></button>
  <pre class="line-numbers  language-cpp"><code class="cpp  language-cpp"><span class="token keyword">struct</span> <span class="token class-name">RobotCleanerTest</span> <span class="token operator">:</span> testing<span class="token operator">::</span>Test <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token comment">// Error: should override SetUp, not Setup/setup/setUp.</span>
  <span class="token keyword">void</span> <span class="token function">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    robot<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token keyword">protected</span><span class="token operator">:</span>
  RobotCleaner robot<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 </div>
 <h2>cctest</h2>
 <p>cctest完成类似Google Test的基本功能特性。相对于Google Test，cctest定义了一套更人性化的DSL，改善用例描述的表达力。</p>
 <ul>
  <li>使用字符串描述用例，改善用例的表达力；</li>
  <li>在同一个类域内，使得测试用例与测试装置之间的关系更加内聚；</li>
  <li>避免<code>setup/setUp/SetUp</code>大小写混用而引发错误。</li>
 </ul>
 <div class="_2Uzcx_">
  <button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy">
    <svg viewbox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
     <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
    </svg></i></button>
  <pre class="line-numbers  language-cpp"><code class="cpp  language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"cctest/cctest.h"</span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>

<span class="token function">FIXTURE</span><span class="token punctuation">(</span>StackSpec<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  std<span class="token operator">::</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>

  SETUP <span class="token punctuation">{</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token string">"apply pop: 0 time"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token string">"apply pop: 1 time"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT_EQ</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">TEST</span><span class="token punctuation">(</span><span class="token string">"apply pop: 2 times"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ASSERT_TRUE</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
 </div>
 <p>cctest的源码在Github上。</p>
 <div class="_2Uzcx_">
  <button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy">
    <svg viewbox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true">
     <path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path>
    </svg></i></button>
  <pre class="line-numbers  language-cpp"><code class="  language-cpp">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>ccup<span class="token operator">/</span>cctest
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
 </div>
</article>